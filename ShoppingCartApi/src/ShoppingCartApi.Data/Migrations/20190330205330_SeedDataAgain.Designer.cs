// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ShoppingCartApi.Data;

namespace ShoppingCartApi.Data.Migrations
{
    [DbContext(typeof(ShoppingCartDbContext))]
    [Migration("20190330205330_SeedDataAgain")]
    partial class SeedDataAgain
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.3-servicing-35854")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("ShoppingCartApi.Data.Entities.CustomerEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            Id = new Guid("87b43b40-1198-4f2b-9012-af70746905c6"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 64, DateTimeKind.Unspecified).AddTicks(4089), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "John",
                            LastName = "Smith"
                        },
                        new
                        {
                            Id = new Guid("9a59bc83-652a-43c2-96ca-9f37bfd56b8e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 64, DateTimeKind.Unspecified).AddTicks(5178), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Jane",
                            LastName = "Brown"
                        },
                        new
                        {
                            Id = new Guid("356a2e7c-7810-42fd-9dae-ce77105ee186"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 64, DateTimeKind.Unspecified).AddTicks(5187), new TimeSpan(0, 0, 0, 0, 0)),
                            FirstName = "Kevin",
                            LastName = "Ali"
                        });
                });

            modelBuilder.Entity("ShoppingCartApi.Data.Entities.OrderEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<Guid>("CustomerId");

                    b.HasKey("Id");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");

                    b.HasData(
                        new
                        {
                            Id = new Guid("d0c2319a-a334-4940-8792-dc595dfabe0e"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 78, DateTimeKind.Unspecified).AddTicks(6140), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = new Guid("87b43b40-1198-4f2b-9012-af70746905c6")
                        },
                        new
                        {
                            Id = new Guid("719d29b7-774f-4514-9b43-14293266f185"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 78, DateTimeKind.Unspecified).AddTicks(6824), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = new Guid("87b43b40-1198-4f2b-9012-af70746905c6")
                        },
                        new
                        {
                            Id = new Guid("388f8500-1ea0-41db-bf22-1bf98cc9150a"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 78, DateTimeKind.Unspecified).AddTicks(6829), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = new Guid("9a59bc83-652a-43c2-96ca-9f37bfd56b8e")
                        },
                        new
                        {
                            Id = new Guid("1e5567f9-73ae-4c71-abb6-831b501d71c2"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 78, DateTimeKind.Unspecified).AddTicks(6834), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = new Guid("356a2e7c-7810-42fd-9dae-ce77105ee186")
                        },
                        new
                        {
                            Id = new Guid("048ce70d-cba3-4a06-ab93-b497514e8973"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 78, DateTimeKind.Unspecified).AddTicks(6834), new TimeSpan(0, 0, 0, 0, 0)),
                            CustomerId = new Guid("356a2e7c-7810-42fd-9dae-ce77105ee186")
                        });
                });

            modelBuilder.Entity("ShoppingCartApi.Data.Entities.OrderItemEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<string>("ConcurrencyToken");

                    b.Property<Guid>("OrderId");

                    b.Property<Guid>("ProductId");

                    b.Property<int>("Quantity");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.HasIndex("ProductId", "OrderId")
                        .IsUnique();

                    b.ToTable("OrderItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("c802d309-8942-422b-ac64-b324c99a94ce"),
                            ConcurrencyToken = "9eb3597e-2e6c-4283-b152-ad912308657b",
                            OrderId = new Guid("d0c2319a-a334-4940-8792-dc595dfabe0e"),
                            ProductId = new Guid("61e4e0e1-f85e-44e5-bae6-7977e0605b65"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("18abb039-4651-418b-9771-6bbf89483491"),
                            ConcurrencyToken = "c0668800-c9a5-4613-b1de-a4d5525ca94d",
                            OrderId = new Guid("d0c2319a-a334-4940-8792-dc595dfabe0e"),
                            ProductId = new Guid("01c32a12-beb6-414a-b8ca-386c08141b73"),
                            Quantity = 22
                        },
                        new
                        {
                            Id = new Guid("76919a98-bb74-4e64-8141-27befe53b9b0"),
                            ConcurrencyToken = "c0c7a1d8-b738-4d4b-8fb1-fb97614ef874",
                            OrderId = new Guid("719d29b7-774f-4514-9b43-14293266f185"),
                            ProductId = new Guid("207cdf30-6f11-4a49-b561-6b6a606ca33d"),
                            Quantity = 4
                        },
                        new
                        {
                            Id = new Guid("42e946bc-87fd-45e0-a2ff-c8658916ef70"),
                            ConcurrencyToken = "424b9ba0-f19e-439a-8c18-baa3e137a006",
                            OrderId = new Guid("719d29b7-774f-4514-9b43-14293266f185"),
                            ProductId = new Guid("01c32a12-beb6-414a-b8ca-386c08141b73"),
                            Quantity = 3
                        },
                        new
                        {
                            Id = new Guid("e20e3557-5322-42a4-949f-5d17ea17778d"),
                            ConcurrencyToken = "4f271561-210b-415c-9b9e-3ab96ec130b2",
                            OrderId = new Guid("388f8500-1ea0-41db-bf22-1bf98cc9150a"),
                            ProductId = new Guid("a8794526-9395-4490-80b6-cef537b1fcd8"),
                            Quantity = 17
                        },
                        new
                        {
                            Id = new Guid("34369397-dd92-4dae-8bb4-934312249fe0"),
                            ConcurrencyToken = "7ff3666a-1c84-44d0-b79e-5c8c29221251",
                            OrderId = new Guid("1e5567f9-73ae-4c71-abb6-831b501d71c2"),
                            ProductId = new Guid("207cdf30-6f11-4a49-b561-6b6a606ca33d"),
                            Quantity = 8
                        },
                        new
                        {
                            Id = new Guid("ebba711f-9e29-4291-be1a-e887a6b89855"),
                            ConcurrencyToken = "3601969a-fbb0-446e-bf0b-fd65cc45a7c9",
                            OrderId = new Guid("048ce70d-cba3-4a06-ab93-b497514e8973"),
                            ProductId = new Guid("207cdf30-6f11-4a49-b561-6b6a606ca33d"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("dd523186-47cc-4f10-97c0-2a486ae802c4"),
                            ConcurrencyToken = "f0887ed8-5f02-4184-9a5e-ec87422f0fc4",
                            OrderId = new Guid("048ce70d-cba3-4a06-ab93-b497514e8973"),
                            ProductId = new Guid("01c32a12-beb6-414a-b8ca-386c08141b73"),
                            Quantity = 1
                        },
                        new
                        {
                            Id = new Guid("6c50c454-c166-4436-9fa9-3e8d26a4566c"),
                            ConcurrencyToken = "83251f3a-a7c4-4520-9076-f7ed461482d9",
                            OrderId = new Guid("048ce70d-cba3-4a06-ab93-b497514e8973"),
                            ProductId = new Guid("a8794526-9395-4490-80b6-cef537b1fcd8"),
                            Quantity = 2
                        });
                });

            modelBuilder.Entity("ShoppingCartApi.Data.Entities.ProductEntity", b =>
                {
                    b.Property<Guid>("Id");

                    b.Property<DateTimeOffset>("CreatedAt");

                    b.Property<string>("Description")
                        .HasMaxLength(1000);

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("Products");

                    b.HasData(
                        new
                        {
                            Id = new Guid("61e4e0e1-f85e-44e5-bae6-7977e0605b65"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 81, DateTimeKind.Unspecified).AddTicks(1177), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Shoes"
                        },
                        new
                        {
                            Id = new Guid("207cdf30-6f11-4a49-b561-6b6a606ca33d"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 81, DateTimeKind.Unspecified).AddTicks(2419), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Wardrobe"
                        },
                        new
                        {
                            Id = new Guid("01c32a12-beb6-414a-b8ca-386c08141b73"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 81, DateTimeKind.Unspecified).AddTicks(2424), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Coffee Cup"
                        },
                        new
                        {
                            Id = new Guid("a8794526-9395-4490-80b6-cef537b1fcd8"),
                            CreatedAt = new DateTimeOffset(new DateTime(2019, 3, 30, 20, 53, 30, 81, DateTimeKind.Unspecified).AddTicks(2429), new TimeSpan(0, 0, 0, 0, 0)),
                            Name = "Curtains"
                        });
                });

            modelBuilder.Entity("ShoppingCartApi.Data.Entities.OrderEntity", b =>
                {
                    b.HasOne("ShoppingCartApi.Data.Entities.CustomerEntity", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .HasConstraintName("FK_Customer_Orders")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("ShoppingCartApi.Data.Entities.OrderItemEntity", b =>
                {
                    b.HasOne("ShoppingCartApi.Data.Entities.OrderEntity", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .HasConstraintName("FK_Order_OrderItems")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("ShoppingCartApi.Data.Entities.ProductEntity", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductId")
                        .HasConstraintName("FK_Product_OrderItems")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
